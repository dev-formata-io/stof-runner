//
// Copyright 2024 Formata, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

type Server {
    #[schema((value: int): bool => value > 0 && value < 10000)]
    port: int = 3030;

    #[schema((value: vec): bool => value.len() >= 4)]
    address: vec = [127, 0, 0, 1];

    // Show Stof errors in responses?
    // Set to false to return opaque errors instead.
    errors: bool = true;

    // Can execute stof?
    run_stof: bool = true;

    // Run timeout.
    run_timeout: s = 10s;
    fn timeout(): s {
        return self.run_timeout;
    }
}

type Registry {
    // Can this runner store stof interfaces?
    enabled: bool = true;

    #[schema((value: str): bool => value.len() > 0)]
    path: str = 'registry';

    users: str = '__users__.json';
}

// By default, the runner is unprotected
type Admin {
    username: str = 'admin'
    password: str = ''

    // permissions granted to any unauthenticated user
    unauth_perms: int = 0b0000;
}

type Runner {
    #[schema]
    server: Server = new Server {};
    
    #[schema]
    registry: Registry = new Registry {};

    #[schema]
    admin: Admin = new Admin {};

    #[run]
    fn run() {
        self.valid = self.schemafy(self);
    }
}

fn unauth_read(): bool { return root.admin.unauth_perms & 0b0001 > 0; }
fn unauth_write(): bool { return root.admin.unauth_perms & 0b0010 > 0; }
fn unauth_delete(): bool { return root.admin.unauth_perms & 0b0100 > 0; }
fn unauth_exec(): bool { return root.admin.unauth_perms & 0b1000 > 0; } 

#[init]
fn init() {
    root as Runner;
    root.exec();
    if (root.debug) pln(root);
}
